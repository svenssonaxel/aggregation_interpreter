
===== Null byte at beginning =====
Syntax error in SQL statement: Unexpected null byte.
> Nelect a from tbl;
! ^
Failed to parse.
=> Exit code: 1

===== Null byte in identifier =====
Syntax error in SQL statement: Unexpected null byte.
> select aN from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Null byte at end =====
Syntax error in SQL statement: Unexpected null byte.
> select a from tblN
!                  ^
Failed to parse.
=> Exit code: 1

===== Illegal UTF-8 byte =====
Syntax error in SQL statement: Bytes 0xf8-0xff are illegal in UTF-8.
> select aú from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Illegal 0xc0 UTF-8 byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select aÀ from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Illegal 0xc1 UTF-8 byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select aÁ from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== UTF-8 overlong 2-byte sequence =====
Syntax error in SQL statement: Overlong UTF-8 encoding.
> select aÁ¡ from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== UTF-8 overlong 3-byte sequence =====
Syntax error in SQL statement: Overlong UTF-8 encoding.
> select aàƒ¶ from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Too high code point (U+123456) =====
Syntax error in SQL statement: Unicode code points above U+10FFFF are invalid.
> select `aô£‘–` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== Surrogate (U+dead) =====
Syntax error in SQL statement: Unicode code points U+D800 -- U+DFFF are invalid, as they correspond to UTF-16 surrogate pairs.
> select `aíº­` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== Non-BMP UTF-8 in identifier =====
Syntax error in SQL statement: Unicode code points above U+FFFF are not allowed in MySQL identifiers.
> select `að “—` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== Illegal token =====
Syntax error in SQL statement: Illegal token
> select #a from tbl;
!        ^
Failed to parse.
=> Exit code: 1

===== EOI inside quoted identifier =====
Syntax error in SQL statement: Unexpected end of input inside quoted identifier
> select `a
!        ^^
Failed to parse.
=> Exit code: 1

===== EOI inside escaped identifier =====
Syntax error in SQL statement: Unexpected end of input inside quoted identifier
> select `bc``de
!        ^^^^^^^
Failed to parse.
=> Exit code: 1

===== UTF-8 2-byte sequence with illegal 2nd byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `aÃ` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 2-byte sequence at EOI with 2nd byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableÃ
!                       ^
Failed to parse.
=> Exit code: 1

===== UTF-8 3-byte sequence with illegal 2nd byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `aá` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 3-byte sequence with illegal 3rd byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `aáš` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 3-byte sequence at EOI with 2nd byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableá
!                       ^
Failed to parse.
=> Exit code: 1

===== UTF-8 3-byte sequence at EOI with 3rd byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableáš
!                       ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence with illegal 2nd byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `að` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence with illegal 3rd byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `að ` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence with illegal 4th byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `að “` from tbl;
!          ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence at EOI with 2nd byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableð
!                       ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence at EOI with 3rd byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableð 
!                       ^
Failed to parse.
=> Exit code: 1

===== UTF-8 4-byte sequence at EOI with 4th byte missing =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select `a` from `tableð “
!                       ^
Failed to parse.
=> Exit code: 1

===== Rogue UTF-8 continuation byte =====
Syntax error in SQL statement: Invalid UTF-8 encoding.
> select a‰ from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Empty input =====
Syntax error in SQL statement: Empty input
Failed to parse.
=> Exit code: 1

===== Invalid token at beginning =====
Syntax error in SQL statement: Illegal token
> select a from tbl;
! ^
Failed to parse.
=> Exit code: 1

===== Control character in unquoted identifier =====
Syntax error in SQL statement: Illegal token
> select a from tbl;
!         ^
Failed to parse.
=> Exit code: 1

===== Invalid token at end =====
Syntax error in SQL statement: Illegal token
> select a from tbl;
!                   ^
Failed to parse.
=> Exit code: 1

===== Unexpected end of input =====
Syntax error in SQL statement: Unexpected end of input
> select a from tbl
!                  ^
Failed to parse.
=> Exit code: 1

===== Unexpected at this point =====
Syntax error in SQL statement: Unexpected at this point
> select a `bcde` from tbl;
!          ^^^^^^
Failed to parse.
=> Exit code: 1

===== Unexpected before newline =====
Syntax error in SQL statement: Unexpected at this point
> select a `bcde`
!          ^^^^^^
>  from tbl;
Failed to parse.
=> Exit code: 1

===== Unexpected after newline =====
Syntax error in SQL statement: Unexpected at this point
> select a 
> `bcde` from tbl;
! ^^^^^^
Failed to parse.
=> Exit code: 1

===== Unexpected with ending newline =====
Syntax error in SQL statement: Unexpected at this point
> select a `bcde` from tbl;
!          ^^^^^^
> Failed to parse.
=> Exit code: 1

===== Unexpected with newline at start =====
Syntax error in SQL statement: Unexpected at this point
> 
> select a `bcde` from tbl;
!          ^^^^^^
Failed to parse.
=> Exit code: 1

===== Unexpected containing newline =====
Syntax error in SQL statement: Unexpected at this point
> select a `bc
!          ^^^
> de` from tbl;
! ^^^
Failed to parse.
=> Exit code: 1

===== Unexpected containing two newlines =====
Syntax error in SQL statement: Unexpected at this point
> select a `b
!          ^^
> cd
! ^^
> e` from tbl;
! ^^
Failed to parse.
=> Exit code: 1

===== Unexpected escaped identifier =====
Syntax error in SQL statement: Unexpected at this point
> select a `bc``de` from tbl;
!          ^^^^^^^^
Failed to parse.
=> Exit code: 1

===== Two escaped identifiers, 1st unexpected =====
Syntax error in SQL statement: Unexpected at this point
> select a `bc``de` from `fg``h``i`;
!          ^^^^^^^^
Failed to parse.
=> Exit code: 1

===== Two escaped identifiers, 2nd unexpected =====
Syntax error in SQL statement: Unexpected at this point
> select a, `bc``de` from tbl `fg``h``i`;
!                             ^^^^^^^^^^
Failed to parse.
=> Exit code: 1

===== Error marker alignment after 2-byte UTF-8 characters =====
Syntax error in SQL statement: Unexpected at this point
> select a
>       ,rÃ¤ksmÃ¶rgÃ¥s rÃ¤ksmÃ¶rgÃ¥s
!                   ^^^^^^^^^^
> from tbl;
Failed to parse.
=> Exit code: 1

===== Error marker alignment after 3-byte UTF-8 character =====
Syntax error in SQL statement: Unexpected at this point
> select a
>       ,áš±ab áš±ab
!            ^^^
> from tbl;
Failed to parse.
=> Exit code: 1

===== Incomplete escape sequence in single-quoted string =====
Syntax error in SQL statement: Incomplete escape sequence in single-quoted string
> select a from tbl where 'word\
!                              ^
Failed to parse.
=> Exit code: 1

===== Unexpected end of input inside single-quoted string =====
Syntax error in SQL statement: Unexpected end of input inside single-quoted string
> select a from tbl where 'word
!                         ^^^^^
Failed to parse.
=> Exit code: 1

===== date_add not supported in output =====
Syntax error in SQL statement: Unexpected at this point
> select date_add(col1, interval 1 day) from tbl;
!        ^^^^^^^^
Failed to parse.
=> Exit code: 1

===== APICompileTest =====
Compilation example 1:

Aggregations:
A0=Max(`apples`)
A1=Sum((`apples` + (`oranges` * `kiwis`)))
A2=Min((`apples` - (`oranges` * `kiwis`)))
A3=Count((`apples` + `apples`))
A4=Count((`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))))))))))))
A5=Min((`apples` + (`apples` + (`apples` + `apples`))))
A6=Max((((`apples` + `apples`) + `apples`) + `apples`))
A7=Count((`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))
A8=Count((`apples` + (`apples` + `apples`)))

Aggregation program (51 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`apples`
Max    A00  r00 A00:MAX <- r00:`apples`
Load   r01  C01 r01 = C01:`oranges`
Load   r02  C02 r02 = C02:`kiwis`
Mul    r01  r02 r01:`oranges` *= r02:`kiwis`
Mov    r02  r00 r02 = r00:`apples`
Add    r00  r01 r00:`apples` += r01:(`oranges` * `kiwis`)
Sum    A01  r00 A01:SUM <- r00:(`apples` + (`oranges` * `kiwis`))
Mov    r00  r02 r00 = r02:`apples`
Minus  r02  r01 r02:`apples` -= r01:(`oranges` * `kiwis`)
Min    A02  r02 A02:MIN <- r02:(`apples` - (`oranges` * `kiwis`))
Mov    r01  r00 r01 = r00:`apples`
Add    r00  r00 r00:`apples` += r00:`apples`
Count  A03  r00 A03:COUNT <- r00:(`apples` + `apples`)
Mov    r02  r01 r02 = r01:`apples`
Add    r01  r00 r01:`apples` += r00:(`apples` + `apples`)
Mov    r03  r02 r03 = r02:`apples`
Add    r02  r01 r02:`apples` += r01:(`apples` + (`apples` + `apples`))
Mov    r04  r03 r04 = r03:`apples`
Add    r03  r02 r03:`apples` += r02:(`apples` + (`apples` + (`apples` + `apples`)))
Mov    r05  r04 r05 = r04:`apples`
Add    r04  r03 r04:`apples` += r03:(`apples` + (`apples` + (`apples` + (`apples` + `apples`))))
Mov    r03  r05 r03 = r05:`apples`
Add    r05  r04 r05:`apples` += r04:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))
Mov    r04  r03 r04 = r03:`apples`
Add    r03  r05 r03:`apples` += r05:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))
Mov    r06  r04 r06 = r04:`apples`
Add    r04  r03 r04:`apples` += r03:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))
Mov    r03  r06 r03 = r06:`apples`
Add    r06  r04 r06:`apples` += r04:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))))
Mov    r04  r03 r04 = r03:`apples`
Add    r03  r06 r03:`apples` += r06:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))))
Mov    r06  r04 r06 = r04:`apples`
Add    r04  r03 r04:`apples` += r03:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))))))
Mov    r03  r06 r03 = r06:`apples`
Add    r06  r04 r06:`apples` += r04:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))))))
Mov    r04  r03 r04 = r03:`apples`
Add    r03  r06 r03:`apples` += r06:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))))))))
Mov    r06  r04 r06 = r04:`apples`
Add    r04  r03 r04:`apples` += r03:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))))))))
Mov    r03  r06 r03 = r06:`apples`
Add    r06  r04 r06:`apples` += r04:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))))))))))
Mov    r04  r03 r04 = r03:`apples`
Add    r03  r06 r03:`apples` += r06:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`)))))))))))))))
Count  A04  r03 A04:COUNT <- r03:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))))))))))))
Min    A05  r02 A05:MIN <- r02:(`apples` + (`apples` + (`apples` + `apples`)))
Add    r00  r04 r00:(`apples` + `apples`) += r04:`apples`
Add    r00  r04 r00:((`apples` + `apples`) + `apples`) += r04:`apples`
Max    A06  r00 A06:MAX <- r00:(((`apples` + `apples`) + `apples`) + `apples`)
Count  A07  r05 A07:COUNT <- r05:(`apples` + (`apples` + (`apples` + (`apples` + (`apples` + (`apples` + `apples`))))))
Count  A08  r01 A08:COUNT <- r01:(`apples` + (`apples` + `apples`))


Compilation example 2:

Aggregations:
A0=Sum((`c` + `c`))
A1=Sum((`c` - `c`))
A2=Sum(((`c` + `c`) + (`c` + `c`)))
A3=Sum(((`c` + `c`) - (`c` + `c`)))
A4=Sum(((`c` + `c`) + `c`))
A5=Sum((`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`)))))))))))
A6=Sum(((((((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`))

Aggregation program (44 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`c`
Mov    r01  r00 r01 = r00:`c`
Add    r00  r00 r00:`c` += r00:`c`
Sum    A00  r00 A00:SUM <- r00:(`c` + `c`)
Mov    r02  r01 r02 = r01:`c`
Minus  r01  r01 r01:`c` -= r01:`c`
Sum    A01  r01 A01:SUM <- r01:(`c` - `c`)
Mov    r01  r00 r01 = r00:(`c` + `c`)
Add    r00  r00 r00:(`c` + `c`) += r00:(`c` + `c`)
Sum    A02  r00 A02:SUM <- r00:((`c` + `c`) + (`c` + `c`))
Mov    r00  r01 r00 = r01:(`c` + `c`)
Minus  r01  r01 r01:(`c` + `c`) -= r01:(`c` + `c`)
Sum    A03  r01 A03:SUM <- r01:((`c` + `c`) - (`c` + `c`))
Mov    r01  r00 r01 = r00:(`c` + `c`)
Add    r00  r02 r00:(`c` + `c`) += r02:`c`
Sum    A04  r00 A04:SUM <- r00:((`c` + `c`) + `c`)
Mov    r03  r02 r03 = r02:`c`
Add    r02  r01 r02:`c` += r01:(`c` + `c`)
Mov    r01  r03 r01 = r03:`c`
Add    r03  r02 r03:`c` += r02:(`c` + (`c` + `c`))
Mov    r02  r01 r02 = r01:`c`
Add    r01  r03 r01:`c` += r03:(`c` + (`c` + (`c` + `c`)))
Mov    r03  r02 r03 = r02:`c`
Add    r02  r01 r02:`c` += r01:(`c` + (`c` + (`c` + (`c` + `c`))))
Mov    r01  r03 r01 = r03:`c`
Add    r03  r02 r03:`c` += r02:(`c` + (`c` + (`c` + (`c` + (`c` + `c`)))))
Mov    r02  r01 r02 = r01:`c`
Add    r01  r03 r01:`c` += r03:(`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`))))))
Mov    r03  r02 r03 = r02:`c`
Add    r02  r01 r02:`c` += r01:(`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`)))))))
Mov    r01  r03 r01 = r03:`c`
Add    r03  r02 r03:`c` += r02:(`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`))))))))
Mov    r02  r01 r02 = r01:`c`
Add    r01  r03 r01:`c` += r03:(`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`)))))))))
Sum    A05  r01 A05:SUM <- r01:(`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + (`c` + `c`))))))))))
Add    r00  r02 r00:((`c` + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:(((`c` + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:((((`c` + `c`) + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:(((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:(((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:((((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) += r02:`c`
Add    r00  r02 r00:(((((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) += r02:`c`
Sum    A06  r00 A06:SUM <- r00:((((((((((`c` + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`) + `c`)

=> Exit code: 0

===== Simple =====
SELECT
  Out_0:`a`
   = C0:`a`
FROM tbl

No aggregation program.

=> Exit code: 0

===== Arithmetics =====
SELECT
  Out_0:`a`
   = C5:`a`
  Out_1:`count(b)`
   = A0:Count(`b`)
  Out_2:`min((b+c)/(d-e))`
   = A1:Min(((`b` + `c`) / (`d` - `e`)))
  Out_3:`max(d*e/f-b/c/f)`
   = A2:Max((((`d` * `e`) / `f`) - ((`b` / `c`) / `f`)))
  Out_4:`count(b/c/f+d*e/f*(b+c))`
   = A3:Count((((`b` / `c`) / `f`) + (((`d` * `e`) / `f`) * (`b` + `c`))))
FROM tbl

Aggregation program (23 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`b`
Count  A00  r00 A00:COUNT <- r00:`b`
Load   r01  C01 r01 = C01:`c`
Mov    r02  r00 r02 = r00:`b`
Add    r00  r01 r00:`b` += r01:`c`
Load   r03  C02 r03 = C02:`d`
Load   r04  C03 r04 = C03:`e`
Mov    r05  r03 r05 = r03:`d`
Minus  r03  r04 r03:`d` -= r04:`e`
Mov    r06  r00 r06 = r00:(`b` + `c`)
Div    r00  r03 r00:(`b` + `c`) /= r03:(`d` - `e`)
Min    A01  r00 A01:MIN <- r00:((`b` + `c`) / (`d` - `e`))
Mul    r05  r04 r05:`d` *= r04:`e`
Load   r00  C04 r00 = C04:`f`
Div    r05  r00 r05:(`d` * `e`) /= r00:`f`
Div    r02  r01 r02:`b` /= r01:`c`
Div    r02  r00 r02:(`b` / `c`) /= r00:`f`
Mov    r00  r05 r00 = r05:((`d` * `e`) / `f`)
Minus  r05  r02 r05:((`d` * `e`) / `f`) -= r02:((`b` / `c`) / `f`)
Max    A02  r05 A02:MAX <- r05:(((`d` * `e`) / `f`) - ((`b` / `c`) / `f`))
Mul    r00  r06 r00:((`d` * `e`) / `f`) *= r06:(`b` + `c`)
Add    r02  r00 r02:((`b` / `c`) / `f`) += r00:(((`d` * `e`) / `f`) * (`b` + `c`))
Count  A03  r02 A03:COUNT <- r02:(((`b` / `c`) / `f`) + (((`d` * `e`) / `f`) * (`b` + `c`)))

=> Exit code: 0

===== Quoted ID =====
SELECT
  Out_0:`a`
   = C5:`a`
  Out_1:`b`
   = C6:`b`
  Out_2:`c``c`
   = C7:`c``c`
  Out_3:`count(``d``)`
   = A0:Count(`d`)
  Out_4:`min((``e````e``+``f``)/(g-``h``))`
   = A1:Min(((`e``e` + `f`) / (`g` - `h`)))
FROM tbl

Aggregation program (10 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`d`
Count  A00  r00 A00:COUNT <- r00:`d`
Load   r00  C01 r00 = C01:`e``e`
Load   r01  C02 r01 = C02:`f`
Add    r00  r01 r00:`e``e` += r01:`f`
Load   r01  C03 r01 = C03:`g`
Load   r02  C04 r02 = C04:`h`
Minus  r01  r02 r01:`g` -= r02:`h`
Div    r00  r01 r00:(`e``e` + `f`) /= r01:(`g` - `h`)
Min    A01  r00 A01:MIN <- r00:((`e``e` + `f`) / (`g` - `h`))

=> Exit code: 0

===== UTF-8 2-byte character in unquoted identifier =====
SELECT
  Out_0:`aÃ¥`
   = C0:`aÃ¥`
FROM tbl

No aggregation program.

=> Exit code: 0

===== UTF-8 2-byte character in quoted identifier =====
SELECT
  Out_0:`aÃ¥`
   = C0:`aÃ¥`
FROM tbl

No aggregation program.

=> Exit code: 0

===== UTF-8 3-byte character in unquoted identifier =====
SELECT
  Out_0:`aáš±`
   = C0:`aáš±`
FROM tbl

No aggregation program.

=> Exit code: 0

===== UTF-8 3-byte character in quoted identifier =====
SELECT
  Out_0:`aáš±`
   = C0:`aáš±`
FROM tbl

No aggregation program.

=> Exit code: 0

===== Control character in quoted identifier =====
SELECT
  Out_0:`a`
   = C0:`a`
FROM tbl

No aggregation program.

=> Exit code: 0

===== has_item regression =====
SELECT
  Out_0:`count(a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a)`
   = A0:Count(((((((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`))
  Out_1:`max(d*e/f-b/c/f)`
   = A1:Max((((`d` * `e`) / `f`) - ((`b` / `c`) / `f`)))
  Out_2:`min((ee+f)/(g-h))`
   = A2:Min(((`ee` + `f`) / (`g` - `h`)))
FROM tbl

Aggregation program (37 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`a`
Mov    r01  r00 r01 = r00:`a`
Add    r00  r00 r00:`a` += r00:`a`
Add    r00  r01 r00:(`a` + `a`) += r01:`a`
Add    r00  r01 r00:((`a` + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((`a` + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((`a` + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:((((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Add    r00  r01 r00:(((((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) += r01:`a`
Count  A00  r00 A00:COUNT <- r00:((((((((((((((((`a` + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`) + `a`)
Load   r00  C01 r00 = C01:`d`
Load   r01  C02 r01 = C02:`e`
Mul    r00  r01 r00:`d` *= r01:`e`
Load   r01  C03 r01 = C03:`f`
Div    r00  r01 r00:(`d` * `e`) /= r01:`f`
Load   r02  C04 r02 = C04:`b`
Load   r03  C05 r03 = C05:`c`
Div    r02  r03 r02:`b` /= r03:`c`
Div    r02  r01 r02:(`b` / `c`) /= r01:`f`
Minus  r00  r02 r00:((`d` * `e`) / `f`) -= r02:((`b` / `c`) / `f`)
Max    A01  r00 A01:MAX <- r00:(((`d` * `e`) / `f`) - ((`b` / `c`) / `f`))
Load   r00  C06 r00 = C06:`ee`
Add    r00  r01 r00:`ee` += r01:`f`
Load   r01  C07 r01 = C07:`g`
Load   r02  C08 r02 = C08:`h`
Minus  r01  r02 r01:`g` -= r02:`h`
Div    r00  r01 r00:(`ee` + `f`) /= r01:(`g` - `h`)
Min    A02  r00 A02:MIN <- r00:((`ee` + `f`) / (`g` - `h`))

=> Exit code: 0

===== Alias =====
SELECT
  Out_0:`a`
   = C3:`a`
  Out_1:`c`
   = C4:`b`
  Out_2:`e``e`
   = C5:`d`
  Out_3:`g`
   = C6:`f``f`
  Out_4:`k`
   = A0:Count((`h` + (`i` / `j``j`)))
FROM tbl

Aggregation program (6 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`i`
Load   r01  C02 r01 = C02:`j``j`
Div    r00  r01 r00:`i` /= r01:`j``j`
Load   r01  C00 r01 = C00:`h`
Add    r01  r00 r01:`h` += r00:(`i` / `j``j`)
Count  A00  r01 A00:COUNT <- r01:(`h` + (`i` / `j``j`))

=> Exit code: 0

===== Integer constants =====
SELECT
  Out_0:`col1`
   = C2:`col1`
  Out_1:`sum(col2+543)`
   = A0:Sum((`col2` + 543))
  Out_2:`subtraction`
   = A1:Max((`col3` - 792))
FROM tbl

Aggregation program (8 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`col2`
LoadI  r01  I00 r01 = I00:543
Add    r00  r01 r00:`col2` += r01:543
Sum    A00  r00 A00:SUM <- r00:(`col2` + 543)
Load   r00  C01 r00 = C01:`col3`
LoadI  r01  I01 r01 = I01:792
Minus  r00  r01 r00:`col3` -= r01:792
Max    A01  r00 A01:MAX <- r00:(`col3` - 792)

=> Exit code: 0

===== Avg =====
SELECT
  Out_0:`col1`
   = C1:`col1`
  Out_1:`sum(col2)`
   = A0:Sum(`col2`)
  Out_2:`max(col2)`
   = A1:Max(`col2`)
  Out_3:`avg(col2)`
   = CLIENT-SIDE CALCULATION: A0:Sum(`col2`) / A2:Count(`col2`)
  Out_4:`min(col2)`
   = A3:Min(`col2`)
  Out_5:`count(col2)`
   = A2:Count(`col2`)
  Out_6:`lastcol`
   = C2:`col3`
FROM tbl
GROUP BY
  C1:col1
  C2:col3

Aggregation program (5 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`col2`
Sum    A00  r00 A00:SUM <- r00:`col2`
Max    A01  r00 A01:MAX <- r00:`col2`
Count  A02  r00 A02:COUNT <- r00:`col2`
Min    A03  r00 A03:MIN <- r00:`col2`

=> Exit code: 0

===== Count all =====
SELECT
  Out_0:`col1`
   = C1:`col1`
  Out_1:`sum(col2)`
   = A0:Sum(`col2`)
  Out_2:`count(*)`
   = A1:Count(1)
  Out_3:`max(col2)`
   = A2:Max(`col2`)
  Out_4:`count(col2)`
   = A3:Count(`col2`)
  Out_5:`count_all`
   = A1:Count(1)
  Out_6:`min(col2)`
   = A4:Min(`col2`)
  Out_7:`lastcol`
   = C2:`col3`
FROM tbl
GROUP BY
  C1:col1
  C2:col3

Aggregation program (7 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`col2`
Sum    A00  r00 A00:SUM <- r00:`col2`
LoadI  r01  I00 r01 = I00:1
Count  A01  r01 A01:COUNT <- r01:1
Max    A02  r00 A02:MAX <- r00:`col2`
Count  A03  r00 A03:COUNT <- r00:`col2`
Min    A04  r00 A04:MIN <- r00:`col2`

=> Exit code: 0

===== Condition =====
SELECT
  Out_0:`col1`
   = C2:`col1`
  Out_1:`sum(col2)`
   = A0:Sum(`col2`)
  Out_2:`max(col3)`
   = A1:Max(`col3`)
  Out_3:`lastcol`
   = C3:`col4`
FROM tbl
WHERE
XOR
+- =
|  +- col2
|  \- +
|     +- col3
|     \- 5
\- AND
   +- !=
   |  +- col2
   |  \- col4
   \- !
      \- >=
         +- col2
         \- 57
GROUP BY
  C2:col1
  C1:col3

Aggregation program (4 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C00 r00 = C00:`col2`
Sum    A00  r00 A00:SUM <- r00:`col2`
Load   r00  C01 r00 = C01:`col3`
Max    A01  r00 A01:MAX <- r00:`col3`

=> Exit code: 0

===== Complex operator precedence =====
SELECT
  Out_0:`a`
   = C0:`a`
FROM tbl
WHERE
AND
+- OR
|  +- OR
|  |  +- a
|  |  \- a
|  \- XOR
|     +- a
|     \- AND
|        +- AND
|        |  +- a
|        |  \- a
|        \- NOT
|           \- BITWISE-OR (|)
|              +- IS
|              |  +- !=
|              |  |  +- !=
|              |  |  |  +- <
|              |  |  |  |  +- <=
|              |  |  |  |  |  +- >
|              |  |  |  |  |  |  +- >=
|              |  |  |  |  |  |  |  +- =
|              |  |  |  |  |  |  |  |  +- a
|              |  |  |  |  |  |  |  |  \- a
|              |  |  |  |  |  |  |  \- a
|              |  |  |  |  |  |  \- a
|              |  |  |  |  |  \- a
|              |  |  |  |  \- a
|              |  |  |  \- a
|              |  |  \- a
|              |  \- NULL
|              \- &
|                 +- a
|                 \- >>
|                    +- <<
|                    |  +- a
|                    |  \- a
|                    \- -
|                       +- +
|                       |  +- a
|                       |  \- a
|                       \- %
|                          +- /
|                          |  +- *
|                          |  |  +- a
|                          |  |  \- a
|                          |  \- a
|                          \- ^
|                             +- a
|                             \- !
|                                \- a
\- OR
   +- OR
   |  +- XOR
   |  |  +- AND
   |  |  |  +- AND
   |  |  |  |  +- =
   |  |  |  |  |  +- >=
   |  |  |  |  |  |  +- >
   |  |  |  |  |  |  |  +- <=
   |  |  |  |  |  |  |  |  +- <
   |  |  |  |  |  |  |  |  |  +- !=
   |  |  |  |  |  |  |  |  |  |  +- !=
   |  |  |  |  |  |  |  |  |  |  |  +- IS
   |  |  |  |  |  |  |  |  |  |  |  |  +- BITWISE-OR (|)
   |  |  |  |  |  |  |  |  |  |  |  |  |  +- &
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- <<
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- >>
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- +
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- -
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- *
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- /
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- %
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- ^
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +- !
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  |  |  \- NOT NULL
   |  |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  |  \- a
   |  |  |  |  |  |  \- a
   |  |  |  |  |  \- NOT
   |  |  |  |  |     \- a
   |  |  |  |  \- a
   |  |  |  \- a
   |  |  \- a
   |  \- a
   \- a

No aggregation program.

=> Exit code: 0

===== Single quoted strings =====
SELECT
  Out_0:`col`
   = C0:`col`
FROM tbl
WHERE
IS
+- STRING: 0x00=<00>,0x27=',0x08=<08>,0x0a=<0A>,0x0d=<0D>,0x09=<09>,0x1a=<1A>,bs=\,bs_perc=\%,bs_ul=\_,Q=Q,7=7
\- NOT NULL

No aggregation program.

=> Exit code: 0

===== Compound strings =====
SELECT
  Out_0:`col`
   = C0:`col`
FROM tbl
WHERE
STRING: hello<20>world

No aggregation program.

=> Exit code: 0

===== date_add =====
SELECT
  Out_0:`col`
   = C0:`col`
FROM tbl
WHERE
IS
+- DATE_ADD
|  +- col1
|  \- INTERVAL
|     +- 1
|     \- DAY
\- NOT NULL

No aggregation program.

=> Exit code: 0

===== date_sub =====
SELECT
  Out_0:`col`
   = C0:`col`
FROM tbl
WHERE
>
+- DATE_ADD
|  +- STRING: 2024-05-06
|  \- INTERVAL
|     +- 23
|     \- MICROSECOND
\- col2

No aggregation program.

=> Exit code: 0

===== extract =====
SELECT
  Out_0:`col`
   = C0:`col`
FROM tbl
WHERE
<=
+- EXTRACT
|  +- YEAR
|  \- STRING: 2024-05-06
\- col2

No aggregation program.

=> Exit code: 0
